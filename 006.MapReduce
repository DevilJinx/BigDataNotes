Mapreduce:
WordCount.java:

一、编辑WordCount.java
1、创建wordcount目录
    创建wordcount测试目录：mkdir -p ~/wordcount/input
    切换至wordcount目录：cd wordcount/

2、编辑WordCount.java代码
vi WordCount.java:
import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {

  public static class TokenizerMapper
       extends Mapper<Object, Text, Text, IntWritable>{

    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();

    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      while (itr.hasMoreTokens()) {
        word.set(itr.nextToken());
        context.write(word, one);
      }
    }
  }

  public static class IntSumReducer
       extends Reducer<Text,IntWritable,Text,IntWritable> {
    private IntWritable result = new IntWritable();

    public void reduce(Text key, Iterable<IntWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
      int sum = 0;
      for (IntWritable val : values) {
        sum += val.get();
      }
      result.set(sum);
      context.write(key, result);
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "word count");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}

二、编译WordCount.java
1、修改编译所需要的环境变量文件
vi /etc/profile:
#JAVA_COMP_PATH----------------------
export PATH=$P{JAVA_HOME}/bin:${PATH}
export HADOOP_CLASSPATH=${JAVA_HOME}/lib/tools.jar

source /etc/profile

2、开始编译
    编译WordCount程序：hadoop com.sun.tools.javac.Main WordCount.java
    把WordCount类打包成wc.jar：jar cf wc.jar WordCount*.class
    查看目录内容：ll

三、创建测试文本文件：
1、复制LICENSE.txt
    切换到输入目录：cp /usr/local/hadoop/LICENSE.txt ~/wordcount/input
    ll ~/wordcount/input

2、启动所有虚拟服务器

3、启动Hadoop Multi-Node Cluster：start-all.sh

4、上传测试文件到HDFS目录
    在HDFS创建目录：hadoop fs -mkdir -p /user/root/wordcount/input
    切换到~/wordcount/input数据文件目录：cd ~/wordcount/input
    上传文本文件到HDFS：hadoop fs -copyFromLocal LICENSE.txt /user/root/wordcount/input
    列出HDFS文件：hadoop fs -ls /user/root/wordcount/input

四、运行WordCount.java
    切换目录：cd ~/wordcount
    运行WordCount程序：hadoop jar wc.jar WordCount /user/root/wordcount/input/LICENSE.txt /user/root/wordcount/output

五、查看运行结果
1、查看输出目录
    查看HDFS的目录：hadoop fs -ls /user/root/wordcount/output

2、查看输出文件
    查看HDFS中的输出文件内容：hadoop fs -cat /user/root/wordcount/output/part-r-00000 | more

3、删除输出目录:hadoop fs -rm -R /user/root/wordcount/output